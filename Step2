### **Jenkins Setup**

1. **Install required plugins** in Jenkins:  
     GitHub Integration
     Docker Pipeline  
     Pipeline: AWS Steps  
     SonarQube Scanner  
     Maven Integration
     Pipeline: Stage View

### **Step 1: Install OWASP Dependency-Check**

mkdir ~/dependency-check && cd ~/dependency-check
wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
unzip dependency-check-8.4.0-release.zip


### **Step 2: Test OWASP Dependency-Check**

~/dependency-check/dependency-check/bin/dependency-check.sh --version


### **Step 3: Scan Your Application**

~/dependency-check/dependency-check/bin/dependency-check.sh --project "MyProject" --scan /home/ubuntu/dependency-check/


### **Step 4: Integrate OWASP Dependency-Check into Jenkins**

- In **Global Tool Configuration**, configure:

  - Name: DependencyCheck
  - Path: /home/ubuntu/dependency-check




## **2. Configure Docker Hub in Jenkins**

### **Step 1: Add Docker Hub Credentials**
1. Go to **Jenkins Dashboard** → **Manage Jenkins** → **Manage Credentials**.
2. Select **Global credentials** → **Add credentials**.
3. Choose **Username & Password**.
   - **ID**: `docker-hub-credentials`
   - **Username**: `<your-dockerhub-username>`
   - **Password**: `<your-dockerhub-password>`
4. Click **Save**.



## **2. Configure GitHub Integration**
### **Step 1: Add GitHub Credentials**
1. **Go to**: Jenkins Dashboard → **Manage Jenkins** → **Manage Credentials**.
2. Select **Global credentials** → **Add credentials**.
3. Choose **Username with password** or **Personal Access Token** for GitHub.


### **Step 2: Configure GitHub Webhook**
1. Go to your **GitHub repository** → **Settings** → **Webhooks**.
2. Click **"Add webhook"** and enter:
   - **Payload URL**: `http://<JENKINS_URL>/github-webhook/`
   - **Content type**: `application/json`
   - **Events**: Select "Just the push event".



### **Step 2: Configure SonarQube in Jenkins**
1. **Go to**: Jenkins Dashboard → **Manage Jenkins** → **Global Tool Configuration**.
2. Find **SonarQube Scanner** → **Add SonarQube Installation**.
3. Set:
   - **Name**: `SonarQube`
   - **Server URL**: `http://localhost:9000`
   - **Authentication Token**: (Generate in SonarQube UI)


### **Step 2: Configure Maven in Jenkins**
1. **Go to**: Jenkins Dashboard → **Manage Jenkins** → **Global Tool Configuration**.
2. Find **Maven** → Click **Add Maven**.
3. Set:
   - **Name**: `Maven`
   - **Maven Home**: `/usr/share/maven`


