### **Jenkins Pipeline for CI/CD: GitHub â†’ Jenkins â†’ SonarQube â†’ Trivy â†’ Docker Hub â†’ EKS**  

### **Jenkins Setup**

1. **Install required plugins** in Jenkins:  
   - Git  
   - Docker Pipeline  
   - Pipeline: AWS Steps  
   - SonarQube Scanner  

2. **Configure credentials in Jenkins**:  
   - GitHub **(Personal Access Token)** â†’ **ID: github-credentials**  
   - SonarQube **(Token)** â†’ **ID: sonarqube-token**  
   - Docker Hub **(Username & Password)** â†’ **ID: dockerhub-credentials**  
   - AWS CLI **(Access & Secret Key)** â†’ **ID: aws-credentials**  

---

## **ðŸ”¹ Jenkinsfile**

pipeline {
    agent any

    environment {
        GITHUB_REPO = 'https://github.com/your-repo.git'
        BRANCH_NAME = 'main'
        SONARQUBE_URL = "http://your-sonarqube-server:9000"
        SONARQUBE_TOKEN = credentials('sonarqube-token')
        DOCKERHUB_USER = credentials('dockerhub-credentials').username
        DOCKERHUB_PASS = credentials('dockerhub-credentials').password
        IMAGE_NAME = "manjuntha1963/springboot-app"
        AWS_REGION = "us-east-1"
        K8S_DEPLOYMENT_FILE = "deployment.yaml"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: "${BRANCH_NAME}", url: "${GITHUB_REPO}"
            }
        }

        stage('Build Spring Boot Application') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Code Quality Analysis - SonarQube') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh '''
                        mvn sonar:sonar \
                        -Dsonar.projectKey=myapp \
                        -Dsonar.host.url=${SONARQUBE_URL} \
                        -Dsonar.login=${SONARQUBE_TOKEN}
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    docker build -t ${IMAGE_NAME}:latest .
                '''
            }
        }

        stage('Security Scan - Trivy') {
            steps {
                sh '''
                    trivy image --severity HIGH,CRITICAL ${IMAGE_NAME}:latest
                '''
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    sh '''
                        echo ${DOCKERHUB_PASS} | docker login -u ${DOCKERHUB_USER} --password-stdin
                        docker push ${IMAGE_NAME}:latest
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes (EKS)') {
            steps {
                withAWS(credentials: 'aws-credentials', region: "${AWS_REGION}") {
                    sh '''
                        kubectl apply -f ${K8S_DEPLOYMENT_FILE}
                    '''
                }
            }
        }
    }

    post {
        always {
            sh 'docker rmi ${IMAGE_NAME}:latest || true'
        }
    }
}


## **ðŸ”¹ Kubernetes Deployment YAML (Example)**


apiVersion: apps/v1
kind: Deployment
metadata:
  name: springboot-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: springboot-app
  template:
    metadata:
      labels:
        app: springboot-app
    spec:
      containers:
        - name: springboot-app
          image: manjuntha1963/springboot-app:latest
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: springboot-service
spec:
  type: LoadBalancer
  selector:
    app: springboot-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

